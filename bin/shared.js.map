{"version":3,"sources":["../lib/shared.js"],"names":["getConfig","console","log","verbose","config","FunctionsConfig","reload","error","process","exit","validateConfig","line","access_token","help","code","prompt","commandErrorHandler","name","optionName","input","toString"],"mappings":";;;;;;;;;AAAA;;AAEO,eAAeA,SAAf,GAA2B;AAChC,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCC,OAAnD;AACA,QAAIC,MAAM,GAAG,MAAMC,iCAAgBC,MAAhB,EAAnB;AACA,WAAOF,MAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF;;AAEM,SAASC,cAAT,CAAwBN,MAAxB,EAAgC;AACrC,MAAI,CAACA,MAAM,CAACO,IAAR,IAAgB,CAACP,MAAM,CAACO,IAAP,CAAYC,YAAjC,EAA+C;AAC7CX,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAuDW,IAAnE;AACAZ,IAAAA,OAAO,CAACC,GAAR,CACE,yEACGW,IAFL;AAIAZ,IAAAA,OAAO,CAACC,GAAR,CACG,GAAE,mDAAmDY,IAAK,GACzD,uBAAuBC,MACxB,EAHH;AAKAP,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AACD;AACD;;AAEM,SAASO,mBAAT,CAA6BT,KAA7B,EAAoC;AACzC,UAAQA,KAAK,CAACU,IAAd;AACE,SAAK,gBAAL;AACEhB,MAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBK,KAAK,CAACW,UAAN,CAAiBC,KAAM,EAAzC,CAA2CZ,KAAvD;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACF;AACER,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACa,QAAN,GAAiBb,KAA7B;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AAPJ;AASD","sourcesContent":["import { FunctionsConfig } from './functions-config';\n\nexport async function getConfig() {\n  try {\n    console.log('Get Firebase Functions configuration'.verbose);\n    let config = await FunctionsConfig.reload();\n    return config;\n  } catch (error) {\n    console.log(error);\n    process.exit(1);\n  }\n}\n\nexport function validateConfig(config) {\n  if (!config.line || !config.line.access_token) {\n    console.log('Functions configuration not found: line.access_token'.help);\n    console.log(\n      'Find your LINE channel access token and use with the following command'\n        .help\n    );\n    console.log(\n      `${'firebase functions:config:set line.access_token='.code}${\n        '<channelAccessToken>'.prompt\n      }`\n    );\n    process.exit(1);\n  }\n  return;\n}\n\nexport function commandErrorHandler(error) {\n  switch (error.name) {\n    case 'UNKNOWN_OPTION':\n      console.log(`Unknown option ${error.optionName.input}`.error);\n      process.exit(1);\n      break;\n    default:\n      console.log(error.toString().error);\n      process.exit(1);\n  }\n}\n"],"file":"shared.js"}