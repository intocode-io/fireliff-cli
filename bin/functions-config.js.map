{"version":3,"sources":["../lib/functions-config.js"],"names":["FailedToGetConfig","error","FailedToGetConfigAuthError","info","verbose","join","EOL","FailedToGetConfigUnknownError","code","FunctionsConfig","AccessToken","config","SingleChannelGroup","AccessTokenName","BaseCommand","ChannelId","ChannelIdName","ChannelSecret","ChannelSecretName","ErrorMessages","get","name","Promise","resolve","reject","command","ChildProcess","exec","output","parseGetConfigError","JSON","parse","jsonParseError","getIdByName","group","prop","getNamesById","id","names","push","errorMessage","Error","message","test","FunctionsConfigError","parseName","toLowerCase","replace","reload","then","set","value","unset"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,iBAAiB,GAAG,8BAA8BC,KAAxD;AACA,MAAMC,0BAA0B,GAAG,CACjCF,iBADiC,EAEjC,eAAeG,IAFkB,EAGjC,2EACGC,OAJ8B,EAKjCC,IALiC,CAK5BC,OAL4B,CAAnC;AAMA,MAAMC,6BAA6B,GAAG,CACpCP,iBADoC,EAEpC,eAAeG,IAFqB,EAGnC,OACC,gBAAgBK,IACjB,sDAFD,CAEuDJ,OALnB,EAMnC,OAAM,qBAAqBI,IAAK,yBAAjC,CAA0DJ,OANtB,EAOpCC,IAPoC,CAO/BC,OAP+B,CAAtC;AASA;AACA;AACA;;AACO,MAAMG,eAAN,CAAsB;AAC3B;AACA;AACA;AACsB,aAAXC,WAAW,GAAG;AACvB,WAAOD,eAAe,CAACE,MAAhB,CAAuBF,eAAe,CAACG,kBAAvC,EACLH,eAAe,CAACI,eADX,CAAP;AAGD;;AAEyB,aAAfA,eAAe,GAAG;AAC3B,WAAO,cAAP;AACD;;AAEqB,aAAXC,WAAW,GAAG;AACvB,WAAO,2BAAP;AACD;;AAEmB,aAATC,SAAS,GAAG;AACrB,WAAON,eAAe,CAACE,MAAhB,CAAuBF,eAAe,CAACG,kBAAvC,EACLH,eAAe,CAACO,aADX,CAAP;AAGD;;AAEuB,aAAbC,aAAa,GAAG;AACzB,WAAOR,eAAe,CAACE,MAAhB,CAAuBF,eAAe,CAACG,kBAAvC,EACLH,eAAe,CAACS,iBADX,CAAP;AAGD;;AAEuB,aAAbF,aAAa,GAAG;AACzB,WAAO,YAAP;AACD;;AAE2B,aAAjBE,iBAAiB,GAAG;AAC7B,WAAO,gBAAP;AACD;;AAEuB,aAAbC,aAAa,GAAG;AACzB,WAAO;AACLnB,MAAAA,iBADK;AAELE,MAAAA,0BAFK;AAGLK,MAAAA;AAHK,KAAP;AAKD;;AAE4B,aAAlBK,kBAAkB,GAAG;AAC9B,WAAO,MAAP;AACD,GAhD0B,CAkD3B;AACA;AACA;;;AACgB,eAAHQ,GAAG,CAACC,IAAD,EAAO;AACrB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,OAAO,GAAI,GAAEhB,eAAe,CAACK,WAAY,MAA7C;;AAEA,UAAIO,IAAJ,EAAU;AACRI,QAAAA,OAAO,GAAI,GAAEA,OAAQ,IAAGJ,IAAK,EAA7B;AACD;;AAEDK,MAAAA,YAAY,CAACC,IAAb,CAAkBF,OAAlB,EAA2B,CAACxB,KAAD,EAAQ2B,MAAR,KAAmB;AAC5C,YAAI3B,KAAJ,EAAW;AACT,iBAAOuB,MAAM,CAACf,eAAe,CAACoB,mBAAhB,CAAoC5B,KAApC,CAAD,CAAb;AACD;;AAED,YAAI;AACF,cAAIU,MAAM,GAAGmB,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAb;AACA,iBAAOL,OAAO,CAACZ,MAAD,CAAd;AACD,SAHD,CAGE,OAAOqB,cAAP,EAAuB;AACvB,iBAAOR,MAAM,CAACQ,cAAD,CAAb;AACD;AACF,OAXD;AAYD,KAnBM,CAAP;AAoBD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC0B,eAAXC,WAAW,CAACC,KAAD,EAAQb,IAAR,EAAcV,MAAd,EAAsB;AAC5C,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACuB,KAAD,CAAtB,EAA+B;AAC7BvB,MAAAA,MAAM,GAAG,MAAMF,eAAe,CAACW,GAAhB,EAAf;AACD;;AAED,QAAIT,MAAM,IAAIA,MAAM,CAACuB,KAAD,CAApB,EAA6B;AAC3B,WAAK,IAAIC,IAAT,IAAiBxB,MAAM,CAACuB,KAAD,CAAvB,EAAgC;AAC9B,YAAIC,IAAI,KAAKd,IAAb,EAAmB;AACjB,iBAAOV,MAAM,CAACuB,KAAD,CAAN,CAAcC,IAAd,CAAP;AACD;AACF;AACF;;AACD,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AAC2B,eAAZC,YAAY,CAACF,KAAD,EAAQG,EAAR,EAAY1B,MAAZ,EAAoB;AAC3C,UAAM2B,KAAK,GAAG,EAAd;;AAEA,QAAI,CAAC3B,MAAD,IAAW,CAACA,MAAM,CAACuB,KAAD,CAAtB,EAA+B;AAC7BvB,MAAAA,MAAM,GAAG,MAAMF,eAAe,CAACW,GAAhB,EAAf;AACD;;AAED,QAAIT,MAAM,IAAIA,MAAM,CAACuB,KAAD,CAApB,EAA6B;AAC3B,WAAK,IAAIb,IAAT,IAAiBV,MAAM,CAACuB,KAAD,CAAvB,EAAgC;AAC9B,YAAIvB,MAAM,CAACuB,KAAD,CAAN,CAAcb,IAAd,MAAwBgB,EAA5B,EAAgC;AAC9BC,UAAAA,KAAK,CAACC,IAAN,CAAWlB,IAAX;AACD;AACF;AACF;;AAED,WAAOiB,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAC4B,SAAnBT,mBAAmB,CAAC5B,KAAD,EAAQ;AAChC,QAAIuC,YAAY,GAAGvC,KAAK,YAAYwC,KAAjB,GAAyBxC,KAAK,CAACyC,OAA/B,GAAyCzC,KAA5D;;AAEA,QAAI,uBAAuB0C,IAAvB,CAA4BH,YAA5B,CAAJ,EAA+C;AAC7C,aAAO,IAAII,0CAAJ,CACLnC,eAAe,CAACU,aAAhB,CAA8BjB,0BADzB,CAAP;AAGD,KAJD,MAIO;AACL,aAAO,IAAI0C,0CAAJ,CACLnC,eAAe,CAACU,aAAhB,CAA8BZ,6BADzB,CAAP;AAGD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACkB,SAATsC,SAAS,CAACxB,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACyB,WAAL,GAAmBC,OAAnB,CAA2B,KAA3B,EAAkC,GAAlC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,SAANC,MAAM,GAAG;AACd,WAAOvC,eAAe,CAACW,GAAhB,GAAsB6B,IAAtB,CACJtC,MAAD,IAAaF,eAAe,CAACE,MAAhB,GAAyBA,MADjC,CAAP;AAGD;;AAEe,eAAHuC,GAAG,CAAC7B,IAAD,EAAO8B,KAAP,EAAc;AAC5B,WAAO,IAAI7B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCE,MAAAA,YAAY,CAACC,IAAb,CACG,GAAElB,eAAe,CAACK,WAAY,QAAOO,IAAK,IAAG8B,KAAM,EADtD,EAEGlD,KAAD,IAAW;AACT,YAAIA,KAAJ,EAAW;AACT,iBAAOuB,MAAM,CAACvB,KAAD,CAAb;AACD;;AACD,eAAOsB,OAAO,CAAC4B,KAAD,CAAd;AACD,OAPH;AASD,KAVM,CAAP;AAWD;;AAEiB,eAALC,KAAK,CAAC/B,IAAD,EAAO;AACvB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCE,MAAAA,YAAY,CAACC,IAAb,CACG,GAAElB,eAAe,CAACK,WAAY,UAASO,IAAK,EAD/C,EAEGpB,KAAD,IAAW;AACT,YAAIA,KAAJ,EAAW;AACT,iBAAOuB,MAAM,CAACvB,KAAD,CAAb;AACD;;AACD,eAAOsB,OAAO,CAACF,IAAD,CAAd;AACD,OAPH;AASD,KAVM,CAAP;AAWD;;AA5L0B","sourcesContent":["import * as ChildProcess from 'child_process';\nimport { EOL } from 'os';\nimport './colors-set-theme';\nimport { FunctionsConfigError } from './functions-config-error';\n\nconst FailedToGetConfig = 'Failed to get configuration'.error;\nconst FailedToGetConfigAuthError = [\n  FailedToGetConfig,\n  'Suggestions:'.info,\n  'Your credentials are no longer valid. Please run firebase login --reauth'\n    .verbose,\n].join(EOL);\nconst FailedToGetConfigUnknownError = [\n  FailedToGetConfig,\n  'Suggestions:'.info,\n  `Run ${\n    'firebase init'.code\n  } to start a project directory in the current folder.`.verbose,\n  `Run ${'firebase use --add'.code} to set active project.`.verbose,\n].join(EOL);\n\n/**\n * FunctionsConfig handle configuration in Firebase Functions\n */\nexport class FunctionsConfig {\n  //\n  // Read-only\n  //\n  static get AccessToken() {\n    return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][\n      FunctionsConfig.AccessTokenName\n    ];\n  }\n\n  static get AccessTokenName() {\n    return 'access_token';\n  }\n\n  static get BaseCommand() {\n    return 'firebase functions:config';\n  }\n\n  static get ChannelId() {\n    return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][\n      FunctionsConfig.ChannelIdName\n    ];\n  }\n\n  static get ChannelSecret() {\n    return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][\n      FunctionsConfig.ChannelSecretName\n    ];\n  }\n\n  static get ChannelIdName() {\n    return 'channel_id';\n  }\n\n  static get ChannelSecretName() {\n    return 'channel_secret';\n  }\n\n  static get ErrorMessages() {\n    return {\n      FailedToGetConfig,\n      FailedToGetConfigAuthError,\n      FailedToGetConfigUnknownError,\n    };\n  }\n\n  static get SingleChannelGroup() {\n    return 'line';\n  }\n\n  //\n  // Methods\n  //\n  static async get(name) {\n    return new Promise((resolve, reject) => {\n      let command = `${FunctionsConfig.BaseCommand}:get`;\n\n      if (name) {\n        command = `${command} ${name}`;\n      }\n\n      ChildProcess.exec(command, (error, output) => {\n        if (error) {\n          return reject(FunctionsConfig.parseGetConfigError(error));\n        }\n\n        try {\n          let config = JSON.parse(output);\n          return resolve(config);\n        } catch (jsonParseError) {\n          return reject(jsonParseError);\n        }\n      });\n    });\n  }\n\n  /**\n   * Find value (id) of a property in a group\n   *\n   * @param {string} group\n   * @param {string} name\n   * @param {*} config\n   */\n  static async getIdByName(group, name, config) {\n    if (!config || !config[group]) {\n      config = await FunctionsConfig.get();\n    }\n\n    if (config && config[group]) {\n      for (let prop in config[group]) {\n        if (prop === name) {\n          return config[group][prop];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find properties in a group which their value matched id\n   *\n   * @param {string} group\n   * @param {string} id\n   * @param {*} config\n   */\n  static async getNamesById(group, id, config) {\n    const names = [];\n\n    if (!config || !config[group]) {\n      config = await FunctionsConfig.get();\n    }\n\n    if (config && config[group]) {\n      for (let name in config[group]) {\n        if (config[group][name] === id) {\n          names.push(name);\n        }\n      }\n    }\n\n    return names;\n  }\n\n  /**\n   *\n   * @param {Error|string} error\n   * @return {string} error message intented to be used in console.log\n   */\n  static parseGetConfigError(error) {\n    let errorMessage = error instanceof Error ? error.message : error;\n\n    if (/Authentication Error/.test(errorMessage)) {\n      return new FunctionsConfigError(\n        FunctionsConfig.ErrorMessages.FailedToGetConfigAuthError\n      );\n    } else {\n      return new FunctionsConfigError(\n        FunctionsConfig.ErrorMessages.FailedToGetConfigUnknownError\n      );\n    }\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @return {string} name in Firebase Functions Config acceptable format\n   */\n  static parseName(name) {\n    return name.toLowerCase().replace(/\\s/g, '_');\n  }\n\n  /**\n   * Load configuration and set into config\n   *\n   * @return {Promise} config\n   */\n  static reload() {\n    return FunctionsConfig.get().then(\n      (config) => (FunctionsConfig.config = config)\n    );\n  }\n\n  static async set(name, value) {\n    return new Promise((resolve, reject) => {\n      ChildProcess.exec(\n        `${FunctionsConfig.BaseCommand}:set ${name}=${value}`,\n        (error) => {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(value);\n        }\n      );\n    });\n  }\n\n  static async unset(name) {\n    return new Promise((resolve, reject) => {\n      ChildProcess.exec(\n        `${FunctionsConfig.BaseCommand}:unset ${name}`,\n        (error) => {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(name);\n        }\n      );\n    });\n  }\n}\n"],"file":"functions-config.js"}