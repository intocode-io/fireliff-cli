{"version":3,"sources":["../lib/fliff.js"],"names":["AddRequiredNameAndUrl","prompt","warn","EOL","input","help","ConfigRequiredIdSecretOrName","error","DeleteRequiredIdOrName","FailedToAddLIFF","FailedToInitPathExists","initPath","FailedToRetrieveIdUsingName","FailedToRetrieveNameUsingId","FailedToSetView","FailedToUnsetViews","RevokeTokenRequiredAccessToken","IssueTokenRequiredChannelIdAndSecret","TokenRequiredIssueOrRevoke","UpdateRequiredIdOrName","WarnPublicHostingConfig","current","preferred","info","FLIFF","ErrorMessages","constructor","init","Promise","resolve","reject","fbjsonPath","path","distPath","basename","errMakeDir","code","FLIFFError","copy","require","__dirname","junk","dot","filter","errCopy","rsCopy","sort","a","b","dest","files","map","file","message","fbjson","hosting","public","installNow","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","toLowerCase","spawn","cmdInstall","cwd","console","log","stderr","on","data","toString","add","options","url","type","replace","description","req","LIFFAddRequest","accessToken","FunctionsConfig","AccessToken","view","res","ble","features","send","response","LIFFConfig","setView","liffId","config","result","id","secret","token","SingleChannelGroup","set","ChannelIdName","errId","ChannelSecretName","errSecret","AccessTokenName","errToken","issue","revoke","undefined","ChannelId","ChannelSecret","OAuthIssueTokenRequest","tokenData","status","access_token","expiresIn","expires_in","token_type","save","statusText","error_description","OAuthRevokeTokenRequest","delete","getViewIdByName","getViewNameById","LIFFDeleteRequest","viewNames","getViewNamesById","all","viewName","unsetView","update","LIFFUpdateRequest","LIFFGetRequest","apps","app","views","Object","keys","key","row","View","join","Type","URL","detail","Description","BLE"],"mappings":"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","sourcesContent":["import { mkdir, existsSync } from 'fs';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport './colors-set-theme';\nimport { FLIFFError } from './fliff-error';\nimport { FunctionsConfig } from './functions-config';\nimport { LIFFConfig } from './liff-config';\nimport { LIFFAddRequest } from './liff-add-request';\nimport { LIFFDeleteRequest } from './liff-delete-request';\nimport { LIFFGetRequest } from './liff-get-request';\nimport { LIFFUpdateRequest } from './liff-update-request';\nimport { OAuthIssueTokenRequest } from './oauth-issue-token-request';\nimport { OAuthRevokeTokenRequest } from './oauth-revoke-token-request';\n\nconst AddRequiredNameAndUrl =\n  `Command ${'fliff add'.prompt} required name and url options`.warn +\n  EOL +\n  `Try re-run with option ${'--name <viewName>'.input} AND ${\n    '--url <viewURL>'.input\n  }`.help;\nconst ConfigRequiredIdSecretOrName =\n  `Failed to configure channel. ${\n    'fliff config'.prompt\n  } required id, secret or token options.`.error +\n  EOL +\n  `Try re-run with option ${'--id <channelId>'.input} OR ${\n    '--secret <channelSecret>'.input\n  } OR ${'--token <channelToken>'.input}`.help;\nconst DeleteRequiredIdOrName =\n  `Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn +\n  EOL +\n  `Try re-run with option ${'--id <liffId>'.input} OR ${\n    '--name <viewName>'.input\n  }`.help;\nconst FailedToAddLIFF = `Failed to add LIFF view`.error;\nconst FailedToInitPathExists = (initPath) =>\n  `${initPath} already exists`.error +\n  EOL +\n  `Please manually delete ${initPath} and try again`.help;\nconst FailedToRetrieveIdUsingName = `Failed to retrieve LIFF ID using view name`\n  .error;\nconst FailedToRetrieveNameUsingId = `Failed to retrieve view name using LIFF ID`\n  .error;\nconst FailedToSetView = `Failed to set view in Functions configuration`.error;\nconst FailedToUnsetViews = `Failed to unset view(s) in Functions configuration`\n  .error;\nconst RevokeTokenRequiredAccessToken =\n  `Command ${'fliff token --revoke'.prompt} required access token.`.warn +\n  EOL +\n  `Try re-run with access token ${'fliff token --revoke <accessToken>'.input}`\n    .help;\nconst IssueTokenRequiredChannelIdAndSecret =\n  `Command ${\n    'fliff token'.prompt\n  } required Channel ID and Secret to be configured first`.error +\n  EOL +\n  `Try run ${\n    'fliff config --id <channelId> --secret <channelSecret>'.input\n  } to configure before re-run ${'fliff token'.prompt} again.`.help;\nconst TokenRequiredIssueOrRevoke =\n  `Command ${'fliff token'.prompt} required issue or revoke options.`.error +\n  EOL +\n  `Try re-run with option ${'--issue'.input} OR ${'--revoke'.input}`.help;\nconst UpdateRequiredIdOrName =\n  `Command ${'fliff update'.prompt} required LIFF ID or name option`.warn +\n  EOL +\n  `Try re-run with option ${'--id <liffId>'.input} OR ${\n    '--name <viewName>'.input\n  }`.help;\nconst WarnPublicHostingConfig = (current, preferred) =>\n  `firebase.json currently set hosting.public to ${current.error}`.warn +\n  EOL +\n  `Please change hosting.public to ${preferred.info}`.warn;\n\nexport class FLIFF {\n  static get ErrorMessages() {\n    return {\n      AddRequiredNameAndUrl,\n      ConfigRequiredIdSecretOrName,\n      DeleteRequiredIdOrName,\n      FailedToAddLIFF,\n      FailedToInitPathExists,\n      FailedToRetrieveIdUsingName,\n      FailedToRetrieveNameUsingId,\n      FailedToSetView,\n      FailedToUnsetViews,\n      RevokeTokenRequiredAccessToken,\n      IssueTokenRequiredChannelIdAndSecret,\n      TokenRequiredIssueOrRevoke,\n      UpdateRequiredIdOrName,\n      WarnPublicHostingConfig,\n    };\n  }\n\n  constructor() {}\n\n  init(initPath) {\n    return new Promise((resolve, reject) => {\n      const fbjsonPath = path.resolve(initPath, '../firebase.json');\n      const distPath = `${path.basename(initPath)}/dist`;\n\n      mkdir(initPath, (errMakeDir) => {\n        if (errMakeDir) {\n          switch (errMakeDir.code) {\n            case 'EEXIST':\n              return reject(\n                new FLIFFError(\n                  FLIFF.ErrorMessages.FailedToInitPathExists(initPath)\n                )\n              );\n            default:\n              return reject(errMakeDir);\n          }\n        }\n\n        const copy = require('recursive-copy');\n\n        copy(\n          path.resolve(__dirname, '../templates/web-views'),\n          initPath,\n          {\n            junk: false,\n            dot: true,\n            filter: [\n              '*',\n              'src/**/*',\n              '!.cache',\n              '!package-lock.json',\n              '!dist',\n              '!node_modules',\n            ],\n          },\n          (errCopy, rsCopy) => {\n            if (errCopy) {\n              return reject(errCopy);\n            }\n\n            rsCopy.sort((a, b) =>\n              a.dest > b.dest ? 1 : b.dest > a.dest ? -1 : 0\n            );\n\n            const files = rsCopy.map((file) => file.dest);\n            let message = '';\n\n            if (existsSync(fbjsonPath)) {\n              const fbjson = require(fbjsonPath);\n\n              if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                message = FLIFF.ErrorMessages.WarnPublicHostingConfig(\n                  fbjson.hosting.public,\n                  distPath\n                );\n              }\n            }\n\n            return resolve({ files, message });\n          }\n        );\n      });\n    });\n  }\n\n  installNow(initPath) {\n    return new Promise((resolve, reject) => {\n      this.prompt = require('prompt');\n\n      this.prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n      this.prompt.start();\n      this.prompt.get(\n        [\n          {\n            name: 'installNow',\n            message: 'Do you want to install node modules now? [yes/no]',\n            validator: /y[es]*|n[o]?/,\n            default: 'yes',\n          },\n        ],\n        (errPrompt, rsPrompt) => {\n          if (errPrompt) {\n            return reject(errPrompt);\n          }\n\n          if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n            const spawn = require('child_process').spawn;\n            const cmdInstall = spawn('npm', ['i', '--loglevel=error'], {\n              cwd: initPath,\n            });\n            console.log(\n              `Installing node modules in ${initPath}. Please wait...`\n            );\n            cmdInstall.stderr.on('data', (data) => reject(data.toString()));\n            cmdInstall.on('exit', (code) => {\n              if (code === 0) {\n                return resolve(true);\n              }\n              return reject(code);\n            });\n          }\n        }\n      );\n    });\n  }\n\n  async add(options) {\n    if (!options.name || !options.url) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.AddRequiredNameAndUrl)\n      );\n    }\n\n    if (!options.type) {\n      options.type = 'full';\n    }\n\n    const name = options.name.toLowerCase().replace(/\\s/g, '_');\n    const description = options.description\n      ? options.description\n      : options.name;\n\n    const req = new LIFFAddRequest({\n      accessToken: FunctionsConfig.AccessToken,\n    });\n    const data = {\n      view: {\n        type: options.type,\n        url: options.url,\n      },\n      description,\n    };\n    let res;\n\n    if (options.ble) {\n      data.features = {\n        ble: options.ble.toLowerCase() == 'false' ? false : true,\n      };\n    }\n\n    try {\n      res = await req.send(data);\n    } catch (error) {\n      if (\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        return Promise.reject(\n          new FLIFFError(error.response.data.message.error)\n        );\n      } else {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.FailedToAddLIFF)\n        );\n      }\n    }\n\n    try {\n      return await LIFFConfig.setView(name, res.data.liffId);\n    } catch (error) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.FailedToSetView)\n      );\n    }\n  }\n\n  async config(options) {\n    let result = {};\n\n    if (!options.id && !options.secret && !options.token) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.ConfigRequiredIdSecretOrName)\n      );\n    } else {\n      result[FunctionsConfig.SingleChannelGroup] = {};\n    }\n\n    if (options.id) {\n      try {\n        await FunctionsConfig.set(\n          `${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelIdName}`,\n          options.id\n        );\n        result[FunctionsConfig.SingleChannelGroup][\n          FunctionsConfig.ChannelIdName\n        ] = options.id;\n      } catch (errId) {\n        return Promise.reject(errId);\n      }\n    }\n\n    if (options.secret) {\n      try {\n        await FunctionsConfig.set(\n          `${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelSecretName}`,\n          options.secret\n        );\n        result[FunctionsConfig.SingleChannelGroup][\n          FunctionsConfig.ChannelSecretName\n        ] = options.secret;\n      } catch (errSecret) {\n        return Promise.reject(errSecret);\n      }\n    }\n\n    if (options.token) {\n      try {\n        await FunctionsConfig.set(\n          `${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`,\n          options.token\n        );\n        result[FunctionsConfig.SingleChannelGroup][\n          FunctionsConfig.AccessTokenName\n        ] = options.token;\n      } catch (errToken) {\n        return Promise.reject(errToken);\n      }\n    }\n\n    return result;\n  }\n\n  async token(options) {\n    if (!options.issue && options.revoke === undefined) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.TokenRequiredIssueOrRevoke)\n      );\n    }\n\n    if (options.issue === true) {\n      if (!FunctionsConfig.ChannelId || !FunctionsConfig.ChannelSecret) {\n        return Promise.reject(\n          new FLIFFError(\n            FLIFF.ErrorMessages.IssueTokenRequiredChannelIdAndSecret\n          )\n        );\n      }\n\n      try {\n        const req = new OAuthIssueTokenRequest();\n        const res = await req.send(\n          FunctionsConfig.ChannelId,\n          FunctionsConfig.ChannelSecret\n        );\n        const tokenData =\n          res.status === 200\n            ? {\n                accessToken: res.data.access_token,\n                expiresIn: res.data.expires_in,\n                type: res.data.token_type,\n              }\n            : false;\n\n        if (tokenData) {\n          if (options.save === true) {\n            await FunctionsConfig.set(\n              `${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`,\n              tokenData.accessToken\n            );\n\n            return tokenData;\n          }\n\n          return tokenData;\n        } else {\n          return Promise.reject(new FLIFFError(res.statusText));\n        }\n      } catch (error) {\n        if (\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n        ) {\n          return Promise.reject(error.response.data.error_description);\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    } else if (options.revoke !== undefined) {\n      if (options.revoke === null) {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.RevokeTokenRequiredAccessToken)\n        );\n      }\n\n      try {\n        const req = new OAuthRevokeTokenRequest();\n        const res = await req.send(options.revoke);\n\n        return res.status === 200\n          ? true\n          : Promise.reject(new FLIFFError(res.statusText));\n      } catch (error) {\n        if (\n          error.response &&\n          error.response.data &&\n          error.response.data.error_description\n        ) {\n          return Promise.reject(error.response.data.error_description);\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  async delete(options) {\n    if (!options.id && !options.name) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.DeleteRequiredIdOrName)\n      );\n    }\n\n    if (!options.id) {\n      options.id = await LIFFConfig.getViewIdByName(\n        options.name,\n        FunctionsConfig.config\n      );\n      if (typeof options.id !== 'string') {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName)\n        );\n      }\n    }\n\n    if (!options.name) {\n      options.name = await LIFFConfig.getViewNameById(\n        options.id,\n        FunctionsConfig.config\n      );\n      if (typeof options.name !== 'string') {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId)\n        );\n      }\n    }\n\n    try {\n      const req = new LIFFDeleteRequest({\n        accessToken: FunctionsConfig.AccessToken,\n      });\n      await req.send(options.id);\n    } catch (error) {\n      if (error.response && error.response.data) {\n        if (error.response.data.message !== 'not found') {\n          return Promise.reject(error.response.data.error);\n        }\n      } else {\n        return Promise.reject(error);\n      }\n    }\n\n    try {\n      const viewNames = await LIFFConfig.getViewNamesById(\n        options.id,\n        FunctionsConfig.config\n      );\n      await Promise.all(\n        viewNames.map((viewName) => LIFFConfig.unsetView(viewName))\n      );\n\n      return viewNames;\n    } catch (error) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.FailedToUnsetViews)\n      );\n    }\n  }\n\n  async update(options) {\n    let data = {};\n\n    if (!options.id && !options.name) {\n      return Promise.reject(\n        new FLIFFError(FLIFF.ErrorMessages.UpdateRequiredIdOrName)\n      );\n    }\n\n    if (!options.id) {\n      options.id = await LIFFConfig.getViewIdByName(\n        options.name,\n        FunctionsConfig.config\n      );\n      if (typeof options.id !== 'string') {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName)\n        );\n      }\n    }\n\n    if (!options.name) {\n      options.name = await LIFFConfig.getViewNameById(\n        options.id,\n        FunctionsConfig.config\n      );\n      if (typeof options.name !== 'string') {\n        return Promise.reject(\n          new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId)\n        );\n      }\n    }\n\n    if (options.type || options.url) {\n      data.view = {};\n      if (options.type) {\n        data.view.type = options.type;\n      }\n      if (options.url) {\n        data.view.url = options.url;\n      }\n    }\n\n    if (options.description) {\n      data.description = options.description;\n    }\n\n    if (options.ble) {\n      data.features = {\n        ble: options.ble.toLowerCase() == 'false' ? false : true,\n      };\n    }\n\n    try {\n      const req = new LIFFUpdateRequest({\n        accessToken: FunctionsConfig.AccessToken,\n      });\n\n      return await req.send(options.id, data);\n    } catch (error) {\n      if (\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        return Promise.reject(error.response.data.message.error);\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  async get(options) {\n    try {\n      const req = new LIFFGetRequest({\n        accessToken: FunctionsConfig.AccessToken,\n      });\n      const res = await req.send();\n\n      return res.data.apps.map((app) => {\n        const views = Object.keys(FunctionsConfig.config.views).filter(\n          (key) => {\n            return FunctionsConfig.config.views[key] === app.liffId;\n          }\n        );\n\n        const row = {\n          View: views.join(', '),\n          'LIFF ID': app.liffId,\n          Type: app.view.type,\n          URL: app.view.url,\n        };\n\n        if (options.detail) {\n          row.Description = app.description || '';\n          row.BLE = app.features && app.features.ble ? '\\u2713' : '\\u2613';\n        }\n\n        return row;\n      });\n    } catch (error) {\n      if (\n        error.response &&\n        error.response.data &&\n        error.response.data.message\n      ) {\n        if (error.response.data.message === 'no apps') {\n          return 'LIFF app not found'.info;\n        } else {\n          return Promise.reject(error.response.data.message.error);\n        }\n      } else {\n        return Promise.reject(error);\n      }\n    }\n  }\n}\n"],"file":"fliff.js"}