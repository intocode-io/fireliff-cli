{"version":3,"sources":["../lib/richmenu-cli.js"],"names":["commandLineArgs","require","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","type","String","alias","Boolean","indexOf","then","config","accessToken","line","access_token","names","data","dataSrc","imageSrc","req","res","uploadReq","RichMenuAddRequest","path","resolve","process","cwd","image","fs","existsSync","console","log","error","exit","verbose","send","input","richMenuId","info","LIFFConfig","setRichMenu","help","code","RichMenuUploadRequest","RichMenuDeleteRequest","id","warn","prompt","getRichMenuIdByName","response","message","getRichMenuNamesById","Promise","all","map","unsetRichMenu","RichMenuGetRequest","richmenus","length","detail","util","inspect","table","menu","Object","keys","filter","key","RichMenu","join","Size","size","width","height","chatBarText","Selected","selected","areas","RichMenuSetDefaultRequest","RichMenuLinkUserRequest","user","RichMenuUnlinkUserRequest","pjson","version","commandError"],"mappings":"AAAA;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAUA;;;;;;;;AAEA,IAAI;AACF,QAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA0BH,eAAe,CAC7C,CAAC;AAAEI,IAAAA,IAAI,EAAE,WAAR;AAAqBC,IAAAA,aAAa,EAAE;AAApC,GAAD,CAD6C,EAE7C;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GAF6C,CAA/C;AAIA,QAAMC,IAAI,GAAGJ,QAAQ,IAAI,EAAzB;AACA,QAAMK,OAAO,GAAGR,eAAe,CAC7B,CACE;AAAEI,IAAAA,IAAI,EAAE,IAAR;AAAcK,IAAAA,IAAI,EAAEC;AAApB,GADF,EAEE;AAAEN,IAAAA,IAAI,EAAE,MAAR;AAAgBK,IAAAA,IAAI,EAAEC;AAAtB,GAFF,EAGE;AAAEN,IAAAA,IAAI,EAAE,OAAR;AAAiBK,IAAAA,IAAI,EAAEC;AAAvB,GAHF,EAIE;AAAEN,IAAAA,IAAI,EAAE,MAAR;AAAgBK,IAAAA,IAAI,EAAEC;AAAtB,GAJF,EAKE;AAAEN,IAAAA,IAAI,EAAE,MAAR;AAAgBK,IAAAA,IAAI,EAAEC;AAAtB,GALF,EAME;AAAEN,IAAAA,IAAI,EAAE,KAAR;AAAeK,IAAAA,IAAI,EAAEC;AAArB,GANF,EAOE;AAAEN,IAAAA,IAAI,EAAE,MAAR;AAAgBO,IAAAA,KAAK,EAAE,GAAvB;AAA4BF,IAAAA,IAAI,EAAEC;AAAlC,GAPF,EAQE;AAAEN,IAAAA,IAAI,EAAE,SAAR;AAAmBO,IAAAA,KAAK,EAAE,GAA1B;AAA+BF,IAAAA,IAAI,EAAEG;AAArC,GARF,EASE;AAAER,IAAAA,IAAI,EAAE,QAAR;AAAkBK,IAAAA,IAAI,EAAEG;AAAxB,GATF,CAD6B,EAY7B;AAAEL,IAAAA;AAAF,GAZ6B,CAA/B,CAPE,CAsBF;;AACA,MACE,CAAC,KAAD,EAAQ,QAAR,EAAkB,KAAlB,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,QAA5C,EAAsDM,OAAtD,CAA8DX,SAA9D,IACA,CAAC,CAFH,EAGE;AACA,6BAAYY,IAAZ,CAAiB,MAAOC,MAAP,IAAkB;AACjC,UAAIC,WAAW,GAAGD,MAAM,CAACE,IAAP,CAAYC,YAA9B;AACA,UAAIC,KAAJ;AACA,UAAIC,IAAJ;AACA,UAAIC,OAAJ;AACA,UAAIC,QAAJ;AACA,UAAIC,GAAJ;AACA,UAAIC,GAAJ;AACA,UAAIC,SAAJ;AAEA,kCAAeV,MAAf;;AAEA,cAAQb,SAAR;AACE,aAAK,KAAL;AACEqB,UAAAA,GAAG,GAAG,IAAIG,yBAAJ,CAAuB;AAAEV,YAAAA;AAAF,WAAvB,CAAN;AACAK,UAAAA,OAAO,GAAGM,IAAI,CAACC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BtB,OAAO,CAACY,IAAR,IAAgB,EAA5C,CAAV;AACAE,UAAAA,QAAQ,GAAGK,IAAI,CAACC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BtB,OAAO,CAACuB,KAAR,IAAiB,EAA7C,CAAX;;AACA,cACEvB,OAAO,CAACY,IAAR,IACAZ,OAAO,CAACuB,KADR,IAEAC,EAAE,CAACC,UAAH,CAAcZ,OAAd,CAFA,IAGAW,EAAE,CAACC,UAAH,CAAcX,QAAd,CAJF,EAKE;AACAF,YAAAA,IAAI,GAAGnB,OAAO,CAACoB,OAAD,CAAd;AACD,WAPD,MAOO;AACLa,YAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCC,KAAlD;AACAP,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AACD,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAqCG,OAAjD;AACAd,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,CAASnB,IAAT,CAAZ;AACD,WAHD,CAGE,OAAOgB,KAAP,EAAc;AACdF,YAAAA,OAAO,CAACC,GAAR,CAAa,wBAAD,CAAyBC,KAArC;AACAF,YAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,WAAU3B,OAAO,CAACJ,IAAR,CAAaoC,KAAM,sBAAqBhB,GAAG,CAACJ,IAAJ,CAASqB,UAAT,CAAoBC,IAAK,EAA5E,CACGJ,OAFL;AAIA,kBAAMK,kBAAWC,WAAX,CAAuBpC,OAAO,CAACJ,IAA/B,EAAqCoB,GAAG,CAACJ,IAAJ,CAASqB,UAA9C,CAAN;AACD,WAND,CAME,OAAOL,KAAP,EAAc;AACdF,YAAAA,OAAO,CAACC,GAAR,CAAa,uCAAD,CAAwCC,KAApD;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAa,uCAAD,CAAwCU,IAApD;AACAX,YAAAA,OAAO,CAACC,GAAR,CACG,2CAA0C3B,OAAO,CAACJ,IAAK,IAAGoB,GAAG,CAACJ,IAAJ,CAASqB,UAAW,EAA/E,CACGK,IAFL;AAIAZ,YAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,gCAA+BX,GAAG,CAACJ,IAAJ,CAASqB,UAAT,CAAoBC,IAAK,EAAzD,CAA2DJ,OAD7D;AAGAb,YAAAA,SAAS,GAAG,IAAIsB,4BAAJ,CAA0B;AAAE/B,cAAAA;AAAF,aAA1B,CAAZ;AACA,kBAAMS,SAAS,CAACc,IAAV,CAAef,GAAG,CAACJ,IAAJ,CAASqB,UAAxB,EAAoCnB,QAApC,CAAN;AACAY,YAAAA,OAAO,CAACC,GAAR,CAAa,UAAb;AACD,WAPD,CAOE,OAAOC,KAAP,EAAc;AACdF,YAAAA,OAAO,CAACC,GAAR,CAAa,wBAAD,CAAyBC,KAArC;AACAF,YAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED;;AAEF,aAAK,QAAL;AACEd,UAAAA,GAAG,GAAG,IAAIyB,4BAAJ,CAA0B;AAAEhC,YAAAA;AAAF,WAA1B,CAAN;;AACA,cAAI,CAACR,OAAO,CAACyC,EAAT,IAAe,CAACzC,OAAO,CAACJ,IAA5B,EAAkC;AAChC8B,YAAAA,OAAO,CAACgB,IAAR,CACG,WACC,kBAAkBC,MACnB,sCAFD,CAEuCD,IAHzC;AAKAhB,YAAAA,OAAO,CAACC,GAAR,CACG,cAAa,oCAAoCK,KAAM,QACtD,wCAAwCA,KACzC,EAFD,CAEGK,IAHL;AAKAhB,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI7B,OAAO,CAACJ,IAAZ,EAAkB;AAChBI,YAAAA,OAAO,CAACyC,EAAR,GAAa,MAAMN,kBAAWS,mBAAX,CACjB5C,OAAO,CAACJ,IADS,EAEjBW,MAFiB,CAAnB;;AAIA,gBAAI,OAAOP,OAAO,CAACyC,EAAf,KAAsB,QAA1B,EAAoC;AAClCf,cAAAA,OAAO,CAACE,KAAR,CACG,sDAAqD5B,OAAO,CAACJ,IAAR,CAAaoC,KAAM,EAAzE,CACGJ,KAFL;AAIAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,sCAAqC3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,EAAvD,CAAyDF,OAD3D;AAGAd,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,CAAS/B,OAAO,CAACyC,EAAjB,CAAZ;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuB3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,EAAzC,CAA2CF,OAAvD;AACD,WAND,CAME,OAAOF,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACiB,QAAN,CAAejC,IAArC,EAA2C;AACzC,kBAAIgB,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAAxB,EAAiC;AAC/BpB,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAApB,CAA4BZ,IAAxC;AACD,eAFD,MAEO;AACLR,gBAAAA,OAAO,CAACC,GAAR,CACG,6BAA4B3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,EAA9C,CAAgDJ,KADlD;AAGAF,gBAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBgB,KAAlC;AACAP,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,aAVD,MAUO;AACLH,cAAAA,OAAO,CAACC,GAAR,CACG,6BAA4B3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,EAA9C,CAAgDJ,KADlD;AAGAF,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,cAAI;AACFlB,YAAAA,KAAK,GAAG,MAAMwB,kBAAWY,oBAAX,CAAgC/C,OAAO,CAACyC,EAAxC,EAA4ClC,MAA5C,CAAd;AACA,kBAAMyC,OAAO,CAACC,GAAR,CACJtC,KAAK,CAACuC,GAAN,CAAWtD,IAAD,IAAUuC,kBAAWgB,aAAX,CAAyBvD,IAAzB,CAApB,CADI,CAAN;AAGA8B,YAAAA,OAAO,CAACC,GAAR,CACG,8CAAD,CAA+CO,IADjD,EAEEvB,KAFF;AAID,WATD,CASE,OAAOiB,KAAP,EAAc;AACdF,YAAAA,OAAO,CAACC,GAAR,CACG,wDAAD,CAAyDC,KAD3D;AAGAF,YAAAA,OAAO,CAACC,GAAR,CACG,kDACC3B,OAAO,CAACyC,EAAR,CAAWT,KACZ,UAAS,eAAeW,MAAO,gCAFhC,CAGGN,IAJL;AAMAX,YAAAA,OAAO,CAACC,GAAR,CACG,0DAAD,CAA2DW,IAD7D;AAGAZ,YAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED;;AAEF,aAAK,KAAL;AACE,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCG,OAApD;AACAf,YAAAA,GAAG,GAAG,IAAIqC,yBAAJ,CAAuB;AAAE5C,cAAAA;AAAF,aAAvB,CAAN;AACAQ,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,EAAZ;;AAEA,gBAAI,CAACf,GAAG,CAACJ,IAAJ,CAASyC,SAAV,IAAuBrC,GAAG,CAACJ,IAAJ,CAASyC,SAAT,CAAmBC,MAAnB,KAA8B,CAAzD,EAA4D;AAC1D5B,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAN,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,WATD,CASE,OAAOD,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACiB,QAAN,CAAejC,IAArC,EAA2C;AACzC,kBAAIgB,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAAxB,EAAiC;AAC/BpB,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAApB,CAA4BZ,IAAxC;AACAb,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD,eAHD,MAGO;AACLH,gBAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBgB,KAAlC;AACAP,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,aARD,MAQO;AACLH,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,cAAI7B,OAAO,CAACuD,MAAR,KAAmB,IAAvB,EAA6B;AAC3B7B,YAAAA,OAAO,CAACC,GAAR,CAAY6B,IAAI,CAACC,OAAL,CAAazC,GAAG,CAACJ,IAAJ,CAASyC,SAAtB,EAAiC,KAAjC,EAAwC,IAAxC,EAA8C,IAA9C,CAAZ;AACD,WAFD,MAEO;AACL3B,YAAAA,OAAO,CAACgC,KAAR,CACE1C,GAAG,CAACJ,IAAJ,CAASyC,SAAT,CAAmBH,GAAnB,CAAwBS,IAAD,IAAU;AAC/B,oBAAMN,SAAS,GAAGO,MAAM,CAACC,IAAP,CAAYtD,MAAM,CAAC8C,SAAnB,EAA8BS,MAA9B,CACfC,GAAD,IAAS;AACP,uBAAOxD,MAAM,CAAC8C,SAAP,CAAiBU,GAAjB,MAA0BJ,IAAI,CAAC1B,UAAtC;AACD,eAHe,CAAlB;AAMA,qBAAO;AACL+B,gBAAAA,QAAQ,EAAEX,SAAS,CAACY,IAAV,CAAe,IAAf,CADL;AAEL,+BAAeN,IAAI,CAAC1B,UAFf;AAGLiC,gBAAAA,IAAI,EAAG,GAAEP,IAAI,CAACQ,IAAL,CAAUC,KAAM,IAAGT,IAAI,CAACQ,IAAL,CAAUE,MAAO,EAHxC;AAIL,4BAAYV,IAAI,CAACW,WAJZ;AAKLC,gBAAAA,QAAQ,EAAEZ,IAAI,CAACa,QALV;AAML,gCAAgBb,IAAI,CAACc,KAAL,CAAWnB;AANtB,eAAP;AAQD,aAfD,CADF;AAkBD;;AAED;;AAEF,aAAK,SAAL;AAAgB;AACdvC,UAAAA,GAAG,GAAG,IAAI2D,gCAAJ,CAA8B;AAAElE,YAAAA;AAAF,WAA9B,CAAN;;AACA,cAAI,CAACR,OAAO,CAACyC,EAAT,IAAe,CAACzC,OAAO,CAACJ,IAA5B,EAAkC;AAChC8B,YAAAA,OAAO,CAACgB,IAAR,CACG,WACC,mBAAmBC,MACpB,sCAFD,CAEuCD,IAHzC;AAKAhB,YAAAA,OAAO,CAACC,GAAR,CACG,cAAa,qCAAqCK,KAAM,QACvD,yCAAyCA,KAC1C,EAFD,CAEGK,IAHL;AAKAhB,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI7B,OAAO,CAACJ,IAAZ,EAAkB;AAChBI,YAAAA,OAAO,CAACyC,EAAR,GAAa,MAAMN,kBAAWS,mBAAX,CACjB5C,OAAO,CAACJ,IADS,EAEjBW,MAFiB,CAAnB;;AAIA,gBAAI,OAAOP,OAAO,CAACyC,EAAf,KAAsB,QAA1B,EAAoC;AAClCf,cAAAA,OAAO,CAACE,KAAR,CACG,sDAAqD5B,OAAO,CAACJ,IAAR,CAAaoC,KAAM,EAAzE,CACGJ,KAFL;AAIAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,mCAAkC3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,aAApD,CACGF,OAFL;AAIAd,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,CAAS/B,OAAO,CAACyC,EAAjB,CAAZ;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2B3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,EAA7C,CAA+CF,OAA3D;AACD,WAPD,CAOE,OAAOF,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACiB,QAAN,CAAejC,IAArC,EAA2C;AACzC,kBAAIgB,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAAxB,EAAiC;AAC/BpB,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAApB,CAA4BZ,IAAxC;AACD,eAFD,MAEO;AACLR,gBAAAA,OAAO,CAACC,GAAR,CACG,0BAAyB3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,aAA3C,CAAwDJ,KAD1D;AAGAF,gBAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBgB,KAAlC;AACAP,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,aAVD,MAUO;AACLH,cAAAA,OAAO,CAACC,GAAR,CACG,0BAAyB3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,aAA3C,CAAwDJ,KAD1D;AAGAF,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED;;AAEF,aAAK,MAAL;AAAa;AACXd,UAAAA,GAAG,GAAG,IAAI4D,8BAAJ,CAA4B;AAAEnE,YAAAA;AAAF,WAA5B,CAAN;;AACA,cAAK,CAACR,OAAO,CAACyC,EAAT,IAAe,CAACzC,OAAO,CAACJ,IAAzB,IAAkC,CAACI,OAAO,CAAC4E,IAA/C,EAAqD;AACnDlD,YAAAA,OAAO,CAACgB,IAAR,CACG,WACC,gBAAgBC,MACjB,uDAFD,CAEwDD,IAH1D;AAKAhB,YAAAA,OAAO,CAACC,GAAR,CACG,cACC,kDAAkDK,KACnD,QACC,sDAAsDA,KACvD,EAJD,CAIGK,IALL;AAOAhB,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI7B,OAAO,CAACJ,IAAZ,EAAkB;AAChBI,YAAAA,OAAO,CAACyC,EAAR,GAAa,MAAMN,kBAAWS,mBAAX,CACjB5C,OAAO,CAACJ,IADS,EAEjBW,MAFiB,CAAnB;;AAIA,gBAAI,OAAOP,OAAO,CAACyC,EAAf,KAAsB,QAA1B,EAAoC;AAClCf,cAAAA,OAAO,CAACE,KAAR,CACG,sDAAqD5B,OAAO,CAACJ,IAAR,CAAaoC,KAAM,EAAzE,CACGJ,KAFL;AAIAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,oCAAmC3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,YAAWhC,OAAO,CAAC4E,IAAK,EAA7E,CACG9C,OAFL;AAIAd,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,CAAS/B,OAAO,CAACyC,EAAjB,EAAqBzC,OAAO,CAAC4E,IAA7B,CAAZ;AACAlD,YAAAA,OAAO,CAACC,GAAR,CACG,sBAAqB3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,YAAWhC,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAArE,CACGF,OAFL;AAID,WAVD,CAUE,OAAOF,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACiB,QAAN,CAAejC,IAArC,EAA2C;AACzC,kBAAIgB,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAAxB,EAAiC;AAC/BpB,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAApB,CAA4BZ,IAAxC;AACD,eAFD,MAEO;AACLR,gBAAAA,OAAO,CAACC,GAAR,CACG,2BAA0B3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,YAAWhC,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAA1E,CACGJ,KAFL;AAIAF,gBAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBgB,KAAlC;AACAP,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,aAXD,MAWO;AACLH,cAAAA,OAAO,CAACC,GAAR,CACG,2BAA0B3B,OAAO,CAACyC,EAAR,CAAWT,KAAM,YAAWhC,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAA1E,CACGJ,KAFL;AAIAF,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED;;AAEF,aAAK,QAAL;AACEd,UAAAA,GAAG,GAAG,IAAI8D,gCAAJ,CAA8B;AAAErE,YAAAA;AAAF,WAA9B,CAAN;;AACA,cAAI,CAACR,OAAO,CAAC4E,IAAb,EAAmB;AACjBlD,YAAAA,OAAO,CAACgB,IAAR,CACG,WAAU,kBAAkBC,MAAO,uBAApC,CAA2DD,IAD7D;AAGAhB,YAAAA,OAAO,CAACC,GAAR,CACG,cAAa,kCAAkCK,KAAM,EAAtD,CAAwDK,IAD1D;AAGAhB,YAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;;AAED,cAAI;AACFH,YAAAA,OAAO,CAACC,GAAR,CACG,gDAA+C3B,OAAO,CAAC4E,IAAK,EAA7D,CACG9C,OAFL;AAIAd,YAAAA,GAAG,GAAG,MAAMD,GAAG,CAACgB,IAAJ,CAAS/B,OAAO,CAAC4E,IAAjB,CAAZ;AACAlD,YAAAA,OAAO,CAACC,GAAR,CACG,+BAA8B3B,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAAlD,CAAoDF,OADtD;AAGD,WATD,CASE,OAAOF,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACiB,QAAN,CAAejC,IAArC,EAA2C;AACzC,kBAAIgB,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAAxB,EAAiC;AAC/BpB,gBAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBkC,OAApB,CAA4BZ,IAAxC;AACD,eAFD,MAEO;AACLR,gBAAAA,OAAO,CAACC,GAAR,CACG,uCAAsC3B,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAA1D,CACGJ,KAFL;AAIAF,gBAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACiB,QAAN,CAAejC,IAAf,CAAoBgB,KAAlC;AACAP,gBAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF,aAXD,MAWO;AACLH,cAAAA,OAAO,CAACC,GAAR,CACG,uCAAsC3B,OAAO,CAAC4E,IAAR,CAAa5C,KAAM,EAA1D,CACGJ,KAFL;AAIAF,cAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACAP,cAAAA,OAAO,CAACQ,IAAR,CAAa,CAAb;AACD;AACF;;AAED;;AAEF;AAzWF;AA2WD,KAvXD;AAwXD,GA5XD,MA4XO,IAAInC,SAAJ,EAAe;AACpB,YAAQA,SAAR;AACE,WAAK,SAAL;AACEgC,QAAAA,OAAO,CAACC,GAAR,CAAa,YAAWmD,iBAAMC,OAAQ,EAAtC;AACA;;AACF,WAAK,MAAL;AACA,cALF,CAME;;AANF;AAQD,GATM,MASA,IAAI/E,OAAO,CAAC+E,OAAZ,EAAqB;AAC1BrD,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWmD,iBAAMC,OAAQ,EAAtC;AACD;AACF,CA/ZD,CA+ZE,OAAOC,YAAP,EAAqB;AACrB,mCAAoBA,YAApB;AACD","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as util from 'util';\nimport './colors-set-theme';\nimport pjson from '../package.json';\nimport {\n  LIFFConfig,\n  RichMenuAddRequest,\n  RichMenuDeleteRequest,\n  RichMenuLinkUserRequest,\n  RichMenuGetRequest,\n  RichMenuUploadRequest,\n  RichMenuSetDefaultRequest,\n  RichMenuUnlinkUserRequest,\n} from './index';\nimport { commandErrorHandler, getConfig, validateConfig } from './shared';\n\ntry {\n  const commandLineArgs = require('command-line-args');\n  const { operation, _unknown } = commandLineArgs(\n    [{ name: 'operation', defaultOption: true }],\n    { stopAtFirstUnknown: true }\n  );\n  const argv = _unknown || [];\n  const options = commandLineArgs(\n    [\n      { name: 'id', type: String },\n      { name: 'data', type: String },\n      { name: 'image', type: String },\n      { name: 'name', type: String },\n      { name: 'type', type: String },\n      { name: 'url', type: String },\n      { name: 'user', alias: 'U', type: String },\n      { name: 'version', alias: 'v', type: Boolean },\n      { name: 'detail', type: Boolean },\n    ],\n    { argv }\n  );\n\n  // Commands that need Functions config\n  if (\n    ['add', 'delete', 'get', 'default', 'link', 'unlink'].indexOf(operation) >\n    -1\n  ) {\n    getConfig().then(async (config) => {\n      let accessToken = config.line.access_token;\n      let names;\n      let data;\n      let dataSrc;\n      let imageSrc;\n      let req;\n      let res;\n      let uploadReq;\n\n      validateConfig(config);\n\n      switch (operation) {\n        case 'add':\n          req = new RichMenuAddRequest({ accessToken });\n          dataSrc = path.resolve(process.cwd(), options.data || '');\n          imageSrc = path.resolve(process.cwd(), options.image || '');\n          if (\n            options.data &&\n            options.image &&\n            fs.existsSync(dataSrc) &&\n            fs.existsSync(imageSrc)\n          ) {\n            data = require(dataSrc);\n          } else {\n            console.log('Data file and image file must exist'.error);\n            process.exit(1);\n          }\n          try {\n            console.log('Sending request to add RichMenu...'.verbose);\n            res = await req.send(data);\n          } catch (error) {\n            console.log(`Failed to add RichMenu`.error);\n            console.error(error);\n            process.exit(1);\n          }\n\n          try {\n            console.log(\n              `Created ${options.name.input} with RichMenu ID: ${res.data.richMenuId.info}`\n                .verbose\n            );\n            await LIFFConfig.setRichMenu(options.name, res.data.richMenuId);\n          } catch (error) {\n            console.log(`Failed to set Functions configuration`.error);\n            console.log(`Try re-run with the following command`.help);\n            console.log(\n              `firebase functions:config:set richmenus.${options.name}=${res.data.richMenuId}`\n                .code\n            );\n            console.error(error);\n            process.exit(1);\n          }\n\n          try {\n            console.log(\n              `Uploading image for RichMenu ${res.data.richMenuId.info}`.verbose\n            );\n            uploadReq = new RichMenuUploadRequest({ accessToken });\n            await uploadReq.send(res.data.richMenuId, imageSrc);\n            console.log(`Uploaded`);\n          } catch (error) {\n            console.log(`Failed to upload image`.error);\n            console.error(error);\n            process.exit(1);\n          }\n\n          break;\n\n        case 'delete':\n          req = new RichMenuDeleteRequest({ accessToken });\n          if (!options.id && !options.name) {\n            console.warn(\n              `Command ${\n                'richmenu delete'.prompt\n              } required RichMenu ID or name option`.warn\n            );\n            console.log(\n              `Try re-run ${'richmenu delete --id <richMenuId>'.input} OR  ${\n                'richmenu delete --name <richMenuName>'.input\n              }`.help\n            );\n            process.exit(1);\n          }\n\n          if (options.name) {\n            options.id = await LIFFConfig.getRichMenuIdByName(\n              options.name,\n              config\n            );\n            if (typeof options.id !== 'string') {\n              console.error(\n                `Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`\n                  .error\n              );\n              process.exit(1);\n            }\n          }\n\n          try {\n            console.log(\n              `Sending request to delete RichMenu ${options.id.input}`.verbose\n            );\n            res = await req.send(options.id);\n            console.log(`Deleted RichMenu ID: ${options.id.input}`.verbose);\n          } catch (error) {\n            if (error.response && error.response.data) {\n              if (error.response.data.message) {\n                console.log(error.response.data.message.info);\n              } else {\n                console.log(\n                  `Failed to delete RichMenu ${options.id.input}`.error\n                );\n                console.error(error.response.data.error);\n                process.exit(1);\n              }\n            } else {\n              console.log(\n                `Failed to delete RichMenu ${options.id.input}`.error\n              );\n              console.error(error);\n              process.exit(1);\n            }\n          }\n\n          try {\n            names = await LIFFConfig.getRichMenuNamesById(options.id, config);\n            await Promise.all(\n              names.map((name) => LIFFConfig.unsetRichMenu(name))\n            );\n            console.log(\n              `Unset richmenu(s) in Functions configuration`.info,\n              names\n            );\n          } catch (error) {\n            console.log(\n              `Failed to unset richmenu(s) in Functions configuration`.error\n            );\n            console.log(\n              `Try looking for RichMenu name with RichMenu ID ${\n                options.id.input\n              } using ${'richmenu get'.prompt} command and unset it manually`\n                .help\n            );\n            console.log(\n              `firebase functions:config:unset richmenus.<richMenuName>`.code\n            );\n            console.error(error);\n            process.exit(1);\n          }\n\n          break;\n\n        case 'get':\n          try {\n            console.log('Sending request to get RichMenu(s)...'.verbose);\n            req = new RichMenuGetRequest({ accessToken });\n            res = await req.send();\n\n            if (!res.data.richmenus || res.data.richmenus.length === 0) {\n              console.log('RichMenu not found');\n              process.exit(0);\n            }\n          } catch (error) {\n            if (error.response && error.response.data) {\n              if (error.response.data.message) {\n                console.log(error.response.data.message.info);\n                process.exit(0);\n              } else {\n                console.error(error.response.data.error);\n                process.exit(1);\n              }\n            } else {\n              console.error(error);\n              process.exit(1);\n            }\n          }\n\n          if (options.detail === true) {\n            console.log(util.inspect(res.data.richmenus, false, null, true));\n          } else {\n            console.table(\n              res.data.richmenus.map((menu) => {\n                const richmenus = Object.keys(config.richmenus).filter(\n                  (key) => {\n                    return config.richmenus[key] === menu.richMenuId;\n                  }\n                );\n\n                return {\n                  RichMenu: richmenus.join(', '),\n                  'RichMenu ID': menu.richMenuId,\n                  Size: `${menu.size.width}x${menu.size.height}`,\n                  'Bar Text': menu.chatBarText,\n                  Selected: menu.selected,\n                  'No. of Areas': menu.areas.length,\n                };\n              })\n            );\n          }\n\n          break;\n\n        case 'default': // Set menu as default for all users\n          req = new RichMenuSetDefaultRequest({ accessToken });\n          if (!options.id && !options.name) {\n            console.warn(\n              `Command ${\n                'richmenu default'.prompt\n              } required RichMenu ID or name option`.warn\n            );\n            console.log(\n              `Try re-run ${'richmenu default --id <richMenuId>'.input} OR  ${\n                'richmenu default --name <richMenuName>'.input\n              }`.help\n            );\n            process.exit(1);\n          }\n\n          if (options.name) {\n            options.id = await LIFFConfig.getRichMenuIdByName(\n              options.name,\n              config\n            );\n            if (typeof options.id !== 'string') {\n              console.error(\n                `Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`\n                  .error\n              );\n              process.exit(1);\n            }\n          }\n\n          try {\n            console.log(\n              `Sending request to set RichMenu ${options.id.input} as default`\n                .verbose\n            );\n            res = await req.send(options.id);\n            console.log(`Set default RichMenu ID: ${options.id.input}`.verbose);\n          } catch (error) {\n            if (error.response && error.response.data) {\n              if (error.response.data.message) {\n                console.log(error.response.data.message.info);\n              } else {\n                console.log(\n                  `Failed to set RichMenu ${options.id.input} as default`.error\n                );\n                console.error(error.response.data.error);\n                process.exit(1);\n              }\n            } else {\n              console.log(\n                `Failed to set RichMenu ${options.id.input} as default`.error\n              );\n              console.error(error);\n              process.exit(1);\n            }\n          }\n\n          break;\n\n        case 'link': // Link a rich menu to an individual user\n          req = new RichMenuLinkUserRequest({ accessToken });\n          if ((!options.id && !options.name) || !options.user) {\n            console.warn(\n              `Command ${\n                'richmenu link'.prompt\n              } required RichMenu ID or name option, and user option`.warn\n            );\n            console.log(\n              `Try re-run ${\n                'richmenu link --id <richMenuId> --user <userId>'.input\n              } OR  ${\n                'richmenu link --name <richMenuName> --user <userId>'.input\n              }`.help\n            );\n            process.exit(1);\n          }\n\n          if (options.name) {\n            options.id = await LIFFConfig.getRichMenuIdByName(\n              options.name,\n              config\n            );\n            if (typeof options.id !== 'string') {\n              console.error(\n                `Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`\n                  .error\n              );\n              process.exit(1);\n            }\n          }\n\n          try {\n            console.log(\n              `Sending request to link RichMenu ${options.id.input} to User ${options.user}`\n                .verbose\n            );\n            res = await req.send(options.id, options.user);\n            console.log(\n              `Linked RichMenu ID ${options.id.input} to User ${options.user.input}`\n                .verbose\n            );\n          } catch (error) {\n            if (error.response && error.response.data) {\n              if (error.response.data.message) {\n                console.log(error.response.data.message.info);\n              } else {\n                console.log(\n                  `Failed to link RichMenu ${options.id.input} to User ${options.user.input}`\n                    .error\n                );\n                console.error(error.response.data.error);\n                process.exit(1);\n              }\n            } else {\n              console.log(\n                `Failed to link RichMenu ${options.id.input} to User ${options.user.input}`\n                  .error\n              );\n              console.error(error);\n              process.exit(1);\n            }\n          }\n\n          break;\n\n        case 'unlink':\n          req = new RichMenuUnlinkUserRequest({ accessToken });\n          if (!options.user) {\n            console.warn(\n              `Command ${'richmenu unlink'.prompt} required user option`.warn\n            );\n            console.log(\n              `Try re-run ${'richmenu unlink --user <userId>'.input}`.help\n            );\n            process.exit(1);\n          }\n\n          try {\n            console.log(\n              `Sending request to unlink RichMenu from User ${options.user}`\n                .verbose\n            );\n            res = await req.send(options.user);\n            console.log(\n              `Unlinked RichMenu from User ${options.user.input}`.verbose\n            );\n          } catch (error) {\n            if (error.response && error.response.data) {\n              if (error.response.data.message) {\n                console.log(error.response.data.message.info);\n              } else {\n                console.log(\n                  `Failed to unlink RichMenu from User ${options.user.input}`\n                    .error\n                );\n                console.error(error.response.data.error);\n                process.exit(1);\n              }\n            } else {\n              console.log(\n                `Failed to unlink RichMenu from User ${options.user.input}`\n                  .error\n              );\n              console.error(error);\n              process.exit(1);\n            }\n          }\n\n          break;\n\n        default:\n      }\n    });\n  } else if (operation) {\n    switch (operation) {\n      case 'version':\n        console.log(`Version: ${pjson.version}`);\n        break;\n      case 'help':\n      default:\n      // TODO: Display help message\n    }\n  } else if (options.version) {\n    console.log(`Version: ${pjson.version}`);\n  }\n} catch (commandError) {\n  commandErrorHandler(commandError);\n}\n"],"file":"richmenu-cli.js"}